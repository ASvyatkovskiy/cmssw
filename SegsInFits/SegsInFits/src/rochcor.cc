#include "SegsInFits/SegsInFits/interface/rochcor.h"
#include <TLorentzVector.h>

const float rochcor::netabin[9] = {-2.4,-2.1,-1.4,-0.7,0.0,0.7,1.4,2.1,2.4};

const float rochcor::dcor_bf[8][8]={{0.000023,0.000008,0.000031,-0.000082,0.000019,0.000026,-0.000077,-0.000089},
				    {0.000271,0.000062,0.000036,0.000047,0.000042,-0.000019,-0.000117,0.000181},
				    {-0.000047,-0.000026,-0.000007,0.000060,0.000082,0.000004,-0.000005,-0.000003},
				    {-0.000311,-0.000104,-0.000001,-0.000024,-0.000082,-0.000052,-0.000048,0.000109},
				    {-0.000104,-0.000031,0.000041,0.000039,0.000039,-0.000010,-0.000111,-0.000050},
				    {-0.000117,-0.000070,-0.000041,0.000064,0.000017,-0.000019,0.000017,-0.000038},
				    {-0.000081,-0.000117,-0.000046,0.000008,0.000037,0.000051,-0.000135,-0.000258},
				    {-0.000089,-0.000111,0.000017,-0.000007,0.000037,-0.000016,-0.000104,0.000030}};

const float rochcor::dcor_ma[8][8]={{0.000808,0.000133,-0.000125,-0.000158,-0.000036,-0.000118,0.000391,0.001571},
				    {0.001321,0.000214,-0.000142,-0.000130,-0.000132,-0.000017,0.000194,0.000527},
				    {0.000379,0.000173,0.000121,0.000106,0.000105,0.000169,0.000154,0.000370},
				    {-0.001410,-0.000324,0.000092,0.000163,0.000138,0.000095,0.000032,0.000156},
				    {-0.002132,-0.000477,0.000124,0.000017,0.000163,0.000304,0.000171,-0.000340},
				    {-0.001512,-0.000504,-0.000014,-0.000019,0.000001,-0.000002,0.000051,-0.000215},
				    {0.000004,-0.000234,-0.000027,-0.000048,-0.000039,-0.000176,-0.000105,0.001306},
				    {0.000170,-0.000013,-0.000033,-0.000113,-0.000191,-0.000197,0.000058,0.001557}};

const float rochcor::mcor_bf[8][8]={{-0.000086,-0.000048,-0.000012,0.000001,0.000002,-0.000005,-0.000072,-0.000105},
				    {-0.000082,-0.000045,-0.000014,-0.000006,-0.000005,-0.000014,-0.000039,-0.000065},
				    {-0.000074,-0.000043,-0.000015,-0.000008,-0.000007,-0.000016,-0.000050,-0.000089},
				    {-0.000075,-0.000036,-0.000006,-0.000003,-0.000001,-0.000013,-0.000043,-0.000078},
				    {-0.000061,-0.000023,0.000000,0.000004,0.000003,-0.000008,-0.000042,-0.000080},
				    {-0.000040,-0.000022,0.000002,0.000008,0.000006,-0.000006,-0.000037,-0.000066},
				    {-0.000088,-0.000048,-0.000007,0.000008,0.000007,0.000001,-0.000034,-0.000064},
				    {-0.000093,-0.000053,-0.000006,0.000007,0.000007,0.000000,-0.000036,-0.000072}};

const float rochcor::mcor_ma[8][8]={{0.000971,0.000130,-0.000154,-0.000170,-0.000166,-0.000197,0.000046,0.000155},
				    {0.001079,-0.000000,-0.000119,-0.000110,-0.000096,-0.000056,0.000221,0.000761},
				    {0.000520,-0.000045,0.000016,0.000020,0.000024,0.000061,0.000065,0.000013},
				    {0.000726,0.000406,0.000179,0.000144,0.000134,0.000154,0.000304,0.000316},
				    {0.000867,0.000521,0.000204,0.000167,0.000159,0.000164,0.000347,0.000982},
				    {-0.001241,-0.000165,0.000103,0.000102,0.000104,0.000070,0.000148,0.000821},
				    {-0.001760,-0.000331,-0.000032,-0.000022,-0.000027,-0.000053,-0.000144,-0.000204},
				    {0.000408,0.000129,-0.000129,-0.000119,-0.000127,-0.000155,-0.000813,-0.002180}};

//=======================================================================================================

const float rochcor::dmavg[8][8]={{0.027250,0.026457,0.026125,0.026415,0.026453,0.026177,0.026549,0.027584},
				  {0.027206,0.026438,0.026124,0.026551,0.026502,0.026157,0.026440,0.027245},
				  {0.027297,0.026485,0.026170,0.026505,0.026482,0.026144,0.026373,0.027313},
				  {0.027114,0.026428,0.026122,0.026444,0.026471,0.026143,0.026446,0.027274},
				  {0.026947,0.026365,0.026096,0.026344,0.026445,0.026126,0.026467,0.027203},
				  {0.027224,0.026437,0.026144,0.026445,0.026454,0.026121,0.026416,0.027200},
				  {0.027622,0.026499,0.026141,0.026444,0.026466,0.026118,0.026439,0.027473},
				  {0.027387,0.026498,0.026117,0.026450,0.026477,0.026163,0.026586,0.027742}};

const float rochcor::dpavg[8][8]={{0.027476,0.026465,0.026105,0.026413,0.026447,0.026095,0.026553,0.027284},
				  {0.027301,0.026399,0.026085,0.026503,0.026481,0.026133,0.026502,0.027365},
				  {0.027497,0.026505,0.026112,0.026491,0.026495,0.026138,0.026482,0.027399},
				  {0.027901,0.026600,0.026131,0.026484,0.026440,0.026129,0.026550,0.027546},
				  {0.027856,0.026680,0.026106,0.026448,0.026447,0.026149,0.026578,0.027619},
				  {0.027474,0.026575,0.026179,0.026523,0.026487,0.026146,0.026539,0.027648},
				  {0.027297,0.026488,0.026133,0.026473,0.026477,0.026153,0.026527,0.027356},
				  {0.027535,0.026581,0.026134,0.026462,0.026448,0.026140,0.026465,0.027024}};
  
const float rochcor::mmavg[8][8]={{0.027269,0.026453,0.026124,0.026396,0.026431,0.026143,0.026522,0.027438},
				  {0.027250,0.026430,0.026137,0.026546,0.026509,0.026145,0.026413,0.027324},
				  {0.027292,0.026452,0.026163,0.026516,0.026498,0.026135,0.026389,0.027308},
				  {0.027300,0.026492,0.026130,0.026453,0.026464,0.026152,0.026491,0.027360},
				  {0.027344,0.026487,0.026115,0.026365,0.026455,0.026132,0.026485,0.027379},
				  {0.027264,0.026473,0.026153,0.026466,0.026472,0.026134,0.026431,0.027346},
				  {0.027386,0.026487,0.026136,0.026445,0.026467,0.026136,0.026419,0.027220},
				  {0.027408,0.026492,0.026102,0.026454,0.026464,0.026160,0.026481,0.027325}};

const float rochcor::mpavg[8][8]={{0.027465,0.026496,0.026123,0.026421,0.026478,0.026121,0.026591,0.027475},
				  {0.027458,0.026458,0.026100,0.026514,0.026489,0.026141,0.026490,0.027386},
				  {0.027469,0.026530,0.026119,0.026501,0.026502,0.026146,0.026482,0.027441},
				  {0.027518,0.026509,0.026108,0.026459,0.026429,0.026119,0.026512,0.027537},
				  {0.027519,0.026560,0.026110,0.026436,0.026453,0.026167,0.026538,0.027453},
				  {0.027429,0.026534,0.026162,0.026513,0.026476,0.026132,0.026542,0.027512},
				  {0.027474,0.026482,0.026129,0.026471,0.026482,0.026141,0.026516,0.027491},
				  {0.027519,0.026576,0.026158,0.026466,0.026457,0.026145,0.026540,0.027466}};

//===============================================================================================
//parameters for Z pt correction

const float rochcor::ptlow[85] = {0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5,
				  6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5,
				  10.0, 10.5, 11.0, 11.5, 12.0, 12.5, 13.0, 13.5, 14.0, 14.5,
				  15.0, 15.5, 16.0, 16.5, 17.0, 17.5, 18.0, 18.5, 19.0, 19.5,
				  20.0, 20.5, 21.0, 21.5, 22.0, 22.5, 23.0, 23.5, 24.0, 24.5,
				  25.0, 26.0, 27.0, 28.0, 29.0,
				  30.0, 32.0, 34.0, 36.0, 38.0,
				  40.0, 44.0, 48.0, 52.0, 56.0,
				  60.0, 65.0, 70.0, 75.0, 80.0, 85.0, 90.0, 95.0,
				  100.0, 110.0, 120.0, 130.0, 140.0, 150.0, 175.0,
				  200.0, 250.0, 350.0, 500.0, 1000.0};

//int nptbins( sizeof(ptlow)/sizeof(float) - 1 );
  
const float rochcor::zptscl[84] = {1.49177,1.45654,1.36283,1.28569,1.2418,1.12336,1.10416,1.08731,0.994051,0.96532,
				   0.94427,0.932725,0.918082,0.899665,0.898398,0.927687,0.908047,0.892392,0.924027,0.945895,
				   0.937149,0.923983,0.923387,0.955362,0.947812,0.962943,0.948781,0.961555,0.95222,0.999207,
				   0.973884,0.993013,0.953487,0.951402,0.985583,0.986603,0.981388,1.00022,1.0294,0.964748,
				   0.974592,1.01546,0.992343,1.00101,0.990866,0.98982,1.02924,1.02265,0.967695,1.02411,
				   0.97331,1.01052,1.01561,0.992594,0.976504,1.01205,0.981111,1.00078,1.02078,1.00719,
				   1.0099,1.02865,1.03845,1.03254,1.09815,1.10263,1.06302,1.0725,1.14703,1.10574,
				   1.13911,1.16947,1.1709,1.11413,1.28793,1.18953,1.20212,1.18112,1.25471,1.15329,
				   1.14276,1.17223,1.09173,2.00229};

const float rochcor::zptscler[84] = {0.0270027,0.0154334,0.0115338,0.00958085,0.0084683,0.00736665,0.0069567,0.00671434,
				     0.00617693,0.00601943,0.00594735,0.00594569,0.00594903,0.00595495,0.00608115,0.00633704,
				     0.0063916,0.0064468,0.00678106,0.00706769,0.00717517,0.00727958,0.00747182,0.00785544,
				     0.00798754,0.00828787,0.00839147,0.00865826,0.00876775,0.00933276,0.00935768,0.0097289,
				     0.00962058,0.00983828,0.0103044,0.0104871,0.0106575,0.0110388,0.0114986,0.0111494,
				     0.0115202,0.0121059,0.0121345,0.0124923,0.0125972,0.0128401,0.0134519,0.0136279,
				     0.0133414,0.014186,0.00992195,0.0105984,0.0109484,0.0111756,0.0114579,0.00870013,
				     0.00904749,0.00970734,0.0104583,0.0109818,0.00837852,0.00939894,0.010415,0.0113433,
				     0.013007,0.0128788,0.0140174,0.0156993,0.0181717,0.019765,0.0222326,0.0249408,
				     0.0272806,0.0211706,0.0278087,0.0306654,0.0361387,0.041327,0.0341513,0.0440116,
				     0.0473006,0.0680212,0.149162,0.56279};


rochcor::~rochcor(){
}

rochcor::rochcor(){
  
  eran1.SetSeed(123456);
  eran2.SetSeed(234567);

}

void rochcor::momcor_mc( TLorentzVector& mu, TLorentzVector& mubar, TLorentzVector& gmu, TLorentzVector& gmubar, int moption){
  
  float ptmu = mu.Pt();
  float ptmub = mubar.Pt();

  float muphi = mu.Phi();
  float mueta = mu.Eta(); // same with mu.Eta() in Root

  float mubphi = mubar.Phi();
  float mubeta = mubar.Eta();

  float px1 = mu.Px();
  float py1 = mu.Py();
  float pz1 = mu.Pz();
  float e1 = mu.E();

  float px2 = mubar.Px();
  float py2 = mubar.Py();
  float pz2 = mubar.Pz();
  float e2 = mubar.E();
  
  int mu_phibin = phibin(muphi);
  int mu_etabin = etabin(mueta);

  int mub_phibin = phibin(mubphi);
  int mub_etabin = etabin(mubeta);
    
  float cor1 = 1.0/(1.0 + mcor_bf[mu_phibin][mu_etabin]/mmavg[mu_phibin][mu_etabin] - mcor_ma[mu_phibin][mu_etabin]*ptmu);
  float cor2 = 1.0/(1.0 + mcor_bf[mub_phibin][mub_etabin]/mpavg[mu_phibin][mu_etabin] + mcor_ma[mub_phibin][mub_etabin]*ptmub);
  
  //for the momentum tuning - eta,phi,Q correction
  px1 *= cor1;
  py1 *= cor1;
  pz1 *= cor1;
  e1 *= cor1;
  
  px2 *= cor2;
  py2 *= cor2;
  pz2 *= cor2;
  e2 *= cor2;
  
  px1 = px1 + (Tfix())*(gmu.Px() - px1);
  py1 = py1 + (Tfix())*(gmu.Py() - py1);
  pz1 = pz1 + (Tfix())*(gmu.Pz() - pz1);
  e1  = e1 + (Tfix())*(gmu.E() - e1);
  
  float tune1 = 1.0/(1.0 + delta()*sqrt(px1*px1 + py1*py1)*eran1.Gaus(1.0,sf()));
  
  px1 *= (tune1); 
  py1 *= (tune1);  
  pz1 *= (tune1);  
  e1 *= (tune1);   
  
  px2 = px2 + (Tfix())*(gmubar.Px() - px2);
  py2 = py2 + (Tfix())*(gmubar.Py() - py2);
  pz2 = pz2 + (Tfix())*(gmubar.Pz() - pz2);
  e2  = e2 + (Tfix())*(gmubar.E() - e2);
  
  float tune2 = 1.0/(1.0 + delta()*sqrt(px2*px2 + py2*py2)*eran2.Gaus(1.0,sf()));
  
  px2 *= (tune2); 
  py2 *= (tune2);  
  pz2 *= (tune2);  
  e2 *= (tune2);   
  
  //after Zpt correction
  float genm_smr = 90.96; //gen mass peak with 2.2% gaussian smearing => better match in Z mass profile vs. eta/phi
  float genm = 91.06; //gen mass peak without smearing => Z mass profile vs. eta/phi in CMS note
  float recm = 90.88; //rec mass peak in MC
  
  float gscl = 1.0;
  if(moption==0) gscl = (genm/recm);
  else if(moption==1) gscl = (genm_smr/recm);
  else if(moption==2) gscl = 1.0;
  
  px1 *= gscl;
  py1 *= gscl;
  pz1 *= gscl;
  e1 *= gscl;
  
  px2 *= gscl;
  py2 *= gscl;
  pz2 *= gscl;
  e2 *= gscl;
  
  mu.SetPxPyPzE(px1,py1,pz1,e1);
  mubar.SetPxPyPzE(px2,py2,pz2,e2);
  
}


void rochcor::momcor_data( TLorentzVector& mu, TLorentzVector& mubar, int moption){
    
  float ptmu = mu.Pt();
  float ptmub = mubar.Pt();

  float muphi = mu.Phi();
  float mueta = mu.Eta(); // same with mu.Eta() in Root

  float mubphi = mubar.Phi();
  float mubeta = mubar.Eta();

  float px1 = mu.Px();
  float py1 = mu.Py();
  float pz1 = mu.Pz();
  float e1 = mu.E();
  
  float px2 = mubar.Px();
  float py2 = mubar.Py();
  float pz2 = mubar.Pz();
  float e2 = mubar.E();
  
  int mu_phibin = phibin(muphi);
  int mu_etabin = etabin(mueta);

  int mub_phibin = phibin(mubphi);
  int mub_etabin = etabin(mubeta);

  float cor1 = 1.0/(1.0 + dcor_bf[mu_phibin][mu_etabin]/dmavg[mu_phibin][mu_etabin] - dcor_ma[mu_phibin][mu_etabin]*ptmu);
  float cor2 = 1.0/(1.0 + dcor_bf[mub_phibin][mub_etabin]/dpavg[mu_phibin][mu_etabin] + dcor_ma[mub_phibin][mub_etabin]*ptmub);  
    
  px1 *= cor1;
  py1 *= cor1;
  pz1 *= cor1;
  e1 *= cor1;
  
  px2 *= cor2;
  py2 *= cor2;
  pz2 *= cor2;
  e2 *= cor2;
  
  //after Z pt correction
  float genm_smr = 90.96; //gen mass peak with 2.2% gaussian smearing => better match in Z mass profile vs. eta/phi
  float genm = 91.06; //gen mass peak without smearing => Z mass profile vs. eta/phi in CMS note
  float recm = 90.88; //rec mass peak in data
  
  float gscl = 1.0;
  if(moption==0) gscl = (genm/recm);
  else if(moption==1) gscl = (genm_smr/recm);
  
  px1 *= gscl;
  py1 *= gscl;
  pz1 *= gscl;
  e1 *= gscl;
  
  px2 *= gscl;
  py2 *= gscl;
  pz2 *= gscl;
  e2 *= gscl;

  mu.SetPxPyPzE(px1,py1,pz1,e1);
  mubar.SetPxPyPzE(px2,py2,pz2,e2);

}

Int_t rochcor::phibin(float phi){
  
  int nphibin = -1;
  
  for(int i=0; i<8; i++){
    if(-roch_pi()+(2.0*roch_pi()/8.0)*i <= phi && -roch_pi()+(2.0*roch_pi()/8.0)*(i+1) > phi){
      nphibin = i;
      break;
    }
  }
  
  return nphibin;
}

Int_t rochcor::etabin(float eta){

  int nbin = -1;
  
  for(int i=0; i<8; i++){
    if(netabin[i] <= eta && netabin[i+1] > eta){
      nbin = i;
      break;
    }
  }
  
  return nbin;
}

float rochcor::zptcor(float gzpt) {
  int ibin( 0 );
  
  // mcptscl[] = 84 bins: [0] and [83] are the underflow and overflow
  if ( gzpt > ptlow[nptbins] ) return nptbins-1;
  if ( gzpt < ptlow[0      ] ) return 0;
  
  for ( int i=0; i<nptbins; ++i ) {
    if ( gzpt>=ptlow[i] && gzpt<ptlow[i+1] ) { ibin=i; break; }
  }

  float zptwt = zptscl[ibin];

  return zptwt;
}
